require('dotenv').config();
const { Octokit } = require('@octokit/rest');
const { WebClient } = require('@slack/web-api');
const axios = require('axios');

class MCPWorkflowOrchestrator {
    constructor() {
        this.github = new Octokit({
            auth: process.env.GITHUB_TOKEN
        });
        this.slack = new WebClient(process.env.SLACK_BOT_TOKEN);
        this.perplexityApiUrl = 'https://api.perplexity.ai/chat/completions';
    }

    // Fetch GitHub Issues (MCP GitHub Server simulation)
    async fetchGitHubIssues() {
        console.log('📥 Fetching GitHub issues...');
        const [owner, repo] = process.env.TARGET_REPO.split('/');

        try {
            const response = await this.github.issues.listForRepo({
                owner,
                repo,
                state: 'open',
                per_page: 5,
                sort: 'created',
                direction: 'desc'
            });

            return response.data.map(issue => ({
                title: issue.title,
                body: issue.body || 'No description provided',
                number: issue.number,
                created_at: issue.created_at,
                html_url: issue.html_url,
                labels: issue.labels.map(label => label.name),
                user: issue.user.login
            }));
        } catch (error) {
            console.error('Error fetching GitHub issues:', error.message);
            return [];
        }
    }

    // AI Summarization using Perplexity API
    async summarizeIssues(issues) {
        console.log('🤖 Generating AI summary with Perplexity...');

        if (issues.length === 0) {
            return 'No open issues found in the repository.';
        }

        const issuesText = issues.map(issue =>
            `Issue #${issue.number}: ${issue.title}
            Description: ${issue.body.substring(0, 200)}...
            Created by: ${issue.user}
            Labels: ${issue.labels.join(', ') || 'None'}
            URL: ${issue.html_url}
            ---`
        ).join('\n');

        try {
            const response = await axios.post(this.perplexityApiUrl, {
                model: 'sonar',  // Using lightweight Sonar model for cost efficiency
                messages: [
                    {
                        role: 'system',
                        content: 'You are an AI assistant that creates concise, structured summaries of GitHub issues. Focus on priorities, key problems, and actionable insights for development teams.'
                    },
                    {
                        role: 'user',
                        content: `Please analyze and summarize these GitHub issues:\n\n${issuesText}\n\nProvide:
                        1. Key Issues Summary (2-3 sentences)
                        2. Priority Assessment 
                        3. Recommended Actions
                        4. Issues requiring immediate attention
                        
                        Keep the summary under 300 words and make it actionable for developers.`
                    }
                ],
                max_tokens: 400,
                temperature: 0.3
            }, {
                headers: {
                    'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            });

            return response.data.choices[0].message.content;
        } catch (error) {
            console.error('Error in Perplexity summarization:', error.response?.data || error.message);
            return 'Error generating AI summary. Please check your Perplexity API key and credits.';
        }
    }

    // Post to Slack (MCP Slack Server simulation)
    // Post to Slack (FIXED FORMATTING)
    // Post to Slack (FIXED BOLD FORMATTING)
    async postToSlack(summary, issues) {
        console.log('📤 Posting to Slack...');

        // Clean up the AI summary and FIX BOLD FORMATTING
        const cleanSummary = summary
            .replace(/\*\*([^*]+)\*\*/g, '*$1*')  // Convert **text** to *text* for Slack
            .replace(/(\d+\.)/g, '\n$1')  // Add line break before numbers
            .replace(/(\*[^*]+\*)/g, '\n$1')  // Add line break before bold headers
            .replace(/- /g, '\n• ')  // Convert hyphens to bullets
            .replace(/\n\n+/g, '\n')  // Remove extra line breaks
            .trim();

        const issuesList = issues.map(issue => {
            const labels = issue.labels.length > 0 ? `(${issue.labels.join(', ')})` : '(No labels)';
            return `• <${issue.html_url}|#${issue.number}: ${issue.title}> ${labels}`;
        }).join('\n');

        // Better formatted message with proper Slack formatting
        const message = `🚀 *GitHub Issues Summary Report*
📊 Generated by MCP Workflow Automation
📅 ${new Date().toLocaleString()}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🤖 *AI ANALYSIS:*

${cleanSummary}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 *RECENT ISSUES (${issues.length}):*
${issuesList}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📁 Repository: \`${process.env.TARGET_REPO}\``;

        try {
            const result = await this.slack.chat.postMessage({
                channel: process.env.SLACK_CHANNEL_NAME,
                text: message,
                mrkdwn: true,  // Enable markdown formatting
                unfurl_links: false
            });
            console.log('✅ Well-formatted message with bold headers posted to Slack');
            return result;
        } catch (error) {
            console.error('Error posting to Slack:', error.message);
            throw error;
        }
    }



    // Main Workflow Orchestration
    async runWorkflow() {
        console.log('🔄 Starting MCP Workflow Automation with Perplexity...');
        console.log('==================================================');

        try {
            // Step 1: Fetch GitHub issues (simulating GitHub MCP Server)
            const issues = await this.fetchGitHubIssues();

            if (issues.length === 0) {
                console.log('ℹ️  No issues found. Creating a demo summary...');
                await this.postToSlack('No open issues found in the repository. Great job maintaining a clean issue tracker!', []);
                return;
            }

            // Step 2: Generate AI summary using Perplexity
            const summary = await this.summarizeIssues(issues);

            // Step 3: Post to Slack (simulating Slack MCP Server)
            await this.postToSlack(summary, issues);

            console.log('==================================================');
            console.log('✅ MCP Workflow completed successfully!');
            console.log(`📊 Processed ${issues.length} issues`);
            console.log('🤖 AI Summary generated with Perplexity');
            console.log('📢 Report posted to Slack');

        } catch (error) {
            console.error('❌ Workflow failed:', error.message);
            console.error('Please check your API keys and configuration.');
        }
    }
}

// Export for testing or run directly
if (require.main === module) {
    const orchestrator = new MCPWorkflowOrchestrator();
    orchestrator.runWorkflow().catch(console.error);
} else {
    module.exports = { MCPWorkflowOrchestrator };
}
